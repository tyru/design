h1. 概要

Vim script レイヤ (volt.vim) と Go レイヤに分かれる。

Vim script レイヤは curl コマンドで Go レイヤを GitHub releases からダウンロードする。
なるべく依存関係を少なくするため git コマンドは使わない。
できたらダウンロードは何も入れずに行えるのがベター (設計については「Vim script レイヤ (volt.vim)」「設計」の項を参照)。
netrw の機能を使って @:so https://raw.githubusercontent.com/vim-volt/vim-volt/master/bootstrap.vim@ とすれば「volt コマンドのインストール」と「volt.vim のインストール」を行うこともできる。

Go レイヤは "src-d/go-git":https://github.com/src-d/go-git を使って git clone などを行う。


h1. Vim script レイヤ (volt.vim)

h2. 設計

* 「volt.vim のダウンロードは何も入れずに行えるのがベター」
** Windows では "Powershell の機能":https://github.com/thinca/vim-themis/issues/31#issuecomment-198952184 などを使い、その他の環境では perl(LWP::Simple), curl, wget などを使い分ける

* 「netrw の機能を使って ～ 「volt コマンドのインストール」と「volt.vim のインストール」を行うこともできる」 (この場合は curl が必要？ (netrw が使うため？))
## bootstrap.vim が netrw によってダウンロードされ実行される
## @$VOLTPATH@ ディレクトリが作られる
*** @$VOLTPATH@ はデフォルトで @$HOME/volt@。変える場合は事前に @$VOLTPATH@ を定義しておく
## "Powershell の機能":https://github.com/thinca/vim-themis/issues/31#issuecomment-198952184, perl(LWP::Simple), curl, wget などを使って volt コマンドを @$VOLTPATH/bin/volt@ にダウンロードする
## volt コマンドを使ってリポジトリごと volt.vim を @$VOLTPATH/repos/github.com/vim-volt/vim-volt@ にダウンロードする
## 新しいバッファが作られ初期設定のガイドが表示される (「vimrc の設定」を参照)

* volt.vim は volt コマンドのバージョン (MAJOR.MINOR.PATCH) を持つ
** 将来は volt コマンドは volt コマンドの MAJOR.MINOR だけ指定して最新版を取得するようにしたい
** どうやって最新版のダウンロード URL を特定する？
*** @{MAJOR}.{MINOR}-latest@ のようなタグを MAJOR.MINOR 以下で常に最新の PATCH を指すようにする？
** どうやってリモートの最新版を特定する？
*** @{MAJOR}.{MINOR}-latest@ のリリースに @LATEST@ のようなファイルを置く？

* job で外部コマンド (volt) を叩く
** @:VoltGet@ で外部コマンド @volt get@ を叩く感じ
* volt コマンドをインストールする
** GOOS と GOARCH を特定して @$HOME/volt/bin@ (@$VOLTPATH/bin@) に @volt@ コマンドのバイナリをインストール
* volt コマンドを初回に実行する前に volt コマンドのバージョンを調べ、volt.vim と非互換だった場合にアップグレード or ダウングレードする

* vivo.vim も持っていた Vim プラグインごとの設定ファイル (plugconf)
** ファイルは @$VOLTPATH/plugconf/{site}/{user}/{name}.vim@ に置く
** vivo.vim では @vivo#plugconf#load()@ を直接呼ぶ必要があった
** volt.vim では本体にインテグレートした扱いにしたい
** 設定ファイルには @set rtp+={volt.vim}@ と @call volt#load()@ を呼ぶだけでいいようにしたい
*** 「volt.vim 関連の vimrc の設定」を参照

h2. vimrc の設定

<pre>
set rtp+=$HOME/volt/repos/github.com/vim-volt/vim-volt

" * lock.json の active_profile / profiles[] から取得した Vim プラグインをロードする
" * プラグインの rtp の追加 ($HOME/.vim 以下にまとめて配置するなら不要)
" * plugconf のロード (これもまとめて $HOME/.vim 以下に配置できる？)
" * :filetype plugin indent on は？
call volt#load()
</pre>

* なるべく記載を少なくシンプルにしたい
GitHub の README.md を見た人が「こんなシンプルなら使ってみたい」となるような短さがいい

* 既存の vimrc はなるべく @$VOLTPATH/rc/init.vim@ に移動してもらう
** これは後述の profile 機能を使うためには既存の vimrc の設定が邪魔になることがあるため

* volt.lock に記載があるがインストールされていない Vim プラグインを fetch するのはユーザ側で @:VoltGet -l@ させる


h2. Ex コマンド

基本的に volt コマンドのサブコマンドと一対一になっている。

* :VoltGet
## @volt get@ を実行
## lock.json ファイルの trx_id と repos[]/trx_id が一致する Vim プラグインのリストを取得し、それぞれに対し以下を実行
### もし rtp になければ
#### rtp に追加
#### @:so plugin/**/*.vim@ を実行
### @:helptags doc@ を実行
### @:so {plugconf}@ を実行
### plugconf の hook_post_update を実行

* :VoltRm
## @volt rm@ を実行
## リポジトリのディレクトリが存在する場合エラーを表示
*** "[ERROR] Repository could not be deleted: " {repos}
## rtp から削除した Vim プラグインを削除
## plugconf の rm フックを実行

* :VoltQuery
## @volt query@ を実行

* :VoltHelptags [-a] [{repository}] ({repository} の書式は @volt get@ と同じ)
## -a オプションが指定されたら volt.lock から Vim プラグインのリストを取得する
## -a オプションが指定されなかったら引数から Vim プラグインのリストを取得する
## Vim プラグインのリストのそれぞれに対して
### @:helptags {repository}@ を実行

* :VoltProfile [{profile name}] (「profile 機能」を参照)
## @volt profile@ を実行

* :VoltEdit [{glob} ...] (oldfilesearch.vim の :OldFileSearch の様なコマンド)
## $VOLTPATH 以下の rc, plugconf ディレクトリ以下からファイルのリストを再帰的に取得
## ファイルのリストを指定された glob で絞り込む
## ファイルのリストが 0 個だったらエラーメッセージ
## ファイルのリストが 1 個だったらそれを開く
## ファイルのリストが 2個以上だったら選択肢を出す
### 選択したら開く

h2. plugconf

(TODO)

hook については "dein.vim の hook":http://qiita.com/delphinus/items/cd221a450fd23506e81a も参考のこと。

h2. plugconf-templates リポジトリ

(TODO)

h2. profile 機能

読み込む Vim プラグインのセットを決められる。
デフォルトは default profile。
@:VoltProfile@ コマンドで切り替えられる。

lock.json の load_init フラグと合わせて完全な sandbox 環境を作ることができる (○○プラグインと☓☓プラグインを組み合わせてまっさらな vimrc(init.vim) で起動する)。

h2. filetype や コマンド実行時に初めて Vim スクリプトファイルを読み込む (遅延ロード機能)

dein.vim には @on_ft@ と @on_cmd@ があるようだ。

* Q. plugconf と lock.json どちらに指定可能にするべきか？
* A. plugconf の先頭行にマジックコメントとして書く
* スクリプトファイルをなるべく読み込みたくないが、 @on_ft@ と @on_cmd@ は plugconf-templates リポジトリに集約させたい情報
* よって vim-volt は plugconf を読み込む前に先頭のマジックコメントをパースする
* これによって読み込み時は遅くなるが、スクリプトの読み込みは避けられる (スクリプトの読み込みは思ったよりメモリも使うし遅い)
* 速度によってはメタデータとして lock.json か別の JSON  ファイルにキャッシュすることも考える


h1. Go レイヤ (volt コマンド)

h2. 設計

* Semantic Versioning に則ったバージョン番号にする
* 設定ファイル (JSON) を持つ
** @$HOME/volt/lock.json@
* Vim プラグインリポジトリの git clone 先について
** @$HOME/volt/repos/{site}/{user}/{name}@
** @$HOME/.vim@ ディレクトリ以下の方がいいか？
*** 設定 (@$VOLTPATH@) で @$HOME/.vim@ 以下にすることもできる？(推奨はしないかもしれない)
* lock.json に書き込む時にはトランザクションと呼ばれる動作を行い同時に lock.json に書き込んでしまい内容を失うことがないようにする (「トランザクション」を参照)

h2. トランザクション

トランザクションの直前にロックファイルの存在確認を行い、存在すれば "[ERROR] trx.lock exists. If process is already dead, please execute 'volt trx rm'" と表示する (これは「トランザクション」の動作には含まれない)。

lock.json に書き込む時にはロックファイルを作り、自身の PID を書き込む。
その後すぐにファイルの内容を読み出し、自身の PID が読み出せればトランザクションを開始してよい。
ファイルの内容が違っていたり、すでにファイルが作られていたらトランザクションは失敗する (コマンドはエラー終了する)。

以下にトランザクションの例を示す。

# A 書き込み
# B 書き込み
# B 読み出し (自身の PID が読み出せたので続行)
# A 書き込み (自身の PID ではなかったためエラー終了)

この図の A のように書き込みが先でも「書き込み」「読み出し」を先に終えた B がトランザクションを獲得する。

h2. サブコマンド

* volt get [-u] {repository}
** リポジトリが指す Vim プラグインをインストール・アップデートする
** -l オプション：volt.lock に記載の Vim プラグインのリストを使用する (引数が指定された場合エラーとなる)
** -u オプション：既存の Vim プラグインをアップデート (初回インストール時は無視)
** -l と -u が同時に指定された場合は全てのリポジトリをアップデート
** repository の書式
*** github.com/user/name -> https://github.com/user/name
*** user/name -> https://github.com/user/name
*** https://github.com/user/name
**** private repository アクセス時の ssh のプロンプトをどうやって回避する？
**** go get はどうしてる？
** 詳細設計
### -l オプションが指定されたら volt.lock から Vim プラグインのリストを取得する
### -l オプションが指定されなかったら引数から Vim プラグインのリストを取得する
### Vim プラグインのリストのそれぞれに対して以下を実行
#### リポジトリが dirty な場合はエラーを出力して終了
### トランザクションを取得
### Vim プラグインのリストのそれぞれに対して以下を実行
#### -u オプションが未指定でリポジトリが存在したら
##### 警告表示 "[WARN] Repository exists:" {repos} して continue
#### リポジトリを一時ディレクトリに clone
#### -u オプションが未指定か HEAD が違う場合は
##### リポジトリを一時ディレクトリから @$VOLTPATH/repos/{site}/{user}/{name}@ に移動
##### @volt plugconf get@ を実行
### リポジトリが移動され @volt plugconf get@ が実行された Vim プラグインを変更して lock.json に書き込む
### アップグレードされたプラグインがあった場合、以下のように表示
**** "[WARN] Reloading upgraded plugin is not supported."
**** "[WARN] Please restart your Vim to reload the following plugins:"
**** アップグレードされたプラグインのリスト

* volt rm [-p] {repository}
** Vim プラグインをアンインストールする
** {repository} の書式は @volt get@ と同じ
** -p オプション：plugconf も削除する (指定されなければ削除しない)

* volt query [-j] [-i] [{repository}]
** Vim プラグインに関する情報を標準出力に出力する
** {repository} の書式は @volt get@ と同じ
** もし {repository} がインストール済みのものでなければリモートの情報を表示 (もちろんインストールはしない)
*** 現時点では必要ないが、検索にも使えるようにしたいため
** -j オプション：JSON で出力
*** どうせ volt.vim からしか使わないのなら JSON 出力をデフォルトにしてもいいかもしれない
** -i オプション：インストールされている Vim プラグイン全てを対象とする

* volt plugconf get {repository}
** https://github.com/vim-volt/plugconf-templates のリポジトリから標準 plugconf を取得して plugconf のディレクトリに保存する
** plugconf がすでにインストールされていたら "[WARN]" {plugconf} "was already installed ... skip" と表示

* volt profile [{profile name}]
## {profile name} が指定されたら
### lock.json の active_profile をセットする
### "[INFO] Please start Vim to load" {profile name} "profile" と表示
## {profile name} が指定されなかったら現在の profile を表示

* volt trx rm [-f]
## ロックファイルから内容を読み出す
### ファイルが存在しないとのエラーが起きたら正常終了
## "go-ps":https://github.com/mitchellh/go-ps ライブラリを用いてロックファイルに書き込まれたプロセスが生きているか確認する
## 生きていて -f オプションが指定されなかった場合は
### "[ERROR] The process is running. Please re-run with -f option if you want to remove 'trx.lock' forcefully" とエラーを表示
## それ以外の場合は
### trx.lock を削除する

h2. $HOME/volt/lock.json の項目

基本は go コマンドのようにシンプルにしたいが、ロック機能は付けたい。
@$VOLTPATH/repos/{user}/{name}@ に cd して開発する場合も考える。
開発する時にまた git checkout するのが面倒なので (vivo.vim ではそうしていたが) volt get した時点で @git checkout@ することはない。
上と同じ理由で branch の情報はいらない。

項目は glide.lock を参考にしている。

* trx_id
** 前回行われたトランザクション (lock.json ファイル書き込み) の ID
* active_profile
** 現在アクティブな profile 名
* load_init
** @$VOLTPATH/rc/init.vim@ を読み込むかどうかのフラグ
* repos[]
** Vim プラグイン情報のリスト
* repos[]/path
** スキーマ (@https://@) なしの URL (@$VOLTPATH/repos/{path}@ の path 部分とも言える)
* repos[]/version
** Git のコミットハッシュ
* repos[]/active
** Vim プラグインを rtp に追加するか否かのフラグ
* repos[]/trx_id
** 記載のトランザクションの時にインストールされたことを示す ID
* profiles[]
** 「profile 機能」を参照
* profiles[]/name
** profile 名
* profiles[]/path
** 読み込む Vim プラグインのスキーマ (@https://@) なしの URL
* profiles[]/load_init
** @$VOLTPATH/rc/init.vim@ を読み込むかどうかのフラグ
